package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;

	Logger log = Logger.getLogger(getClass());
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal String IDENT;
terminal Character CHAR;
terminal Integer NUM, BOOL;
terminal PROG, LBRACE, RBRACE, CONST, SEMI, ASSIGN, COMMA, LBRACKET, RBRACKET;
terminal VOID, LPAREN, RPAREN, MAP, NEW, OR, AND, INC, DEC;
terminal IF, ELSE, WHILE, DO, BREAK, CONTINUE, RETURN, READ, PRINT;
terminal PLUS, MINUS, MUL, DIV, MOD;
terminal EQ, NEQ, GT, GTE, LT, LTE;
terminal UNION;


nonterminal Program, ProgName, ConstVarDeclList;
nonterminal ConstDeclList, ConstDecl, Constant, ConstDeclListMore;
nonterminal VarDeclList, VarDecl, VarDeclListMore, VarDeclEmpty;
nonterminal MethodDeclList, MethodDecl, MethodSignatureList, MethodName;
nonterminal FormParsList, FormParsListMore, FormParsListZero, FormPar;
nonterminal StatementList, Statement, StatementElse, DoVisit;
nonterminal DesignatorStatementList, DesignatorStatement, ConditionDesignator;
nonterminal FactorActPars;
nonterminal ActParsList, ActPars, ActPar, ActParsListBegin;
nonterminal Assignop, Addop, Mulop, Relop, Setop;

nonterminal rs.etf.pp1.symboltable.concepts.Struct FactorList, Factor, Type;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Term, TermMulFactor;
nonterminal rs.etf.pp1.symboltable.concepts.Struct ExprList, ExprAddopTerm;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator, DesignatorArray, MethodSignature;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Condition, CondTermList, CondTerm, CondFactList, CondFact;

precedence left ELSE;




Program ::= (Program) PROG ProgName ConstVarDeclList LBRACE MethodDeclList RBRACE;

ProgName ::= (ProgName) IDENT;

ConstVarDeclList ::= (CConstVarDeclList) ConstVarDeclList ConstDeclList 
					 | 
					 (VConstVarDeclList) ConstVarDeclList VarDeclList
					 |
					 (NoConstVarDeclList) /* epsilon */
					 ;
						
						

ConstDeclList ::= (ConstDeclList) CONST Type ConstDecl ConstDeclListMore SEMI;

ConstDecl ::= (ConstDeclConst) IDENT ASSIGN Constant
			  |
			  (ErrorConstDecl) error:d
              {: parser.report_error("Oporavak od greske u definiciji globalne promenjive (CONST). Linija: " + dleft, null); :}
              ;

Constant ::= (NumConst) NUM 
			 | 
			 (CharConst) CHAR 
			 | 
			 (BoolConst) BOOL
			 ;	
			
ConstDeclListMore ::= (MoreConstDeclList) COMMA ConstDecl ConstDeclListMore
                      |
                      (NoMoreConstDeclList) /* epsilon */
                      ;



VarDeclList ::= (VarDeclList) Type VarDecl VarDeclListMore SEMI;
                    
VarDecl ::= (IdentVarDecl) IDENT
			| 
			(ArrayVarDecl) IDENT LBRACKET RBRACKET
			|
			(ErrorVarDecl) error:l
            {: parser.report_error("Oporavak od greske u definiciji globalne promenjive (NOCONST). Linija: " + lleft, null); :}
			;

VarDeclListMore ::= (MoreVarDeclList) COMMA VarDecl VarDeclListMore
                    |
                    (NoMoreVarDeclList) /* epsilon */
                    ;

Type ::= (Type) IDENT;


MethodDeclList ::= (ListMethodDecl) MethodDeclList MethodDecl
                   |
                   (NoMethodDeclList) /* epsilon */
                   ;
                    
MethodDecl ::= (MethodDecl) MethodSignatureList VarDeclEmpty LBRACE StatementList RBRACE;

MethodSignatureList ::= (MethodSignatureList) MethodSignature LPAREN FormParsListZero RPAREN;

MethodSignature ::= (TypeSignature) Type IDENT
					|
					(VoidSignature) VOID IDENT
					;
					

VarDeclEmpty ::= (EmptyVarDecl) VarDeclEmpty VarDeclList
				 |
				 (NoEmptyVarDecl) /* epsilon */
				 ;
				 




FormParsListZero ::= (ZeroFormParsList) FormParsList
                     |
                     (NoFormParsListZero) /* epsilon */
                     ;

FormParsList ::= (FormParsList) FormPar FormParsListMore;

FormParsListMore ::= (MoreFormParsList) COMMA FormPar FormParsListMore
                     |
                     (NoMoreFormParsList) /* epsilon */
                     ;
                     
FormPar ::= (FormParVar) Type IDENT  
			|
			(FormParArray) Type IDENT LBRACKET RBRACKET
			|
			(ErrorFormPar) error:f
            {: parser.report_error("Oporavak od greske u deklaraciji formalnog parametra funkcije. Linija: " + fleft, null); :}
			; 


StatementList ::= (ListStatement) StatementList Statement
				  |										   
				  (NoStatementList) /* epsilon */
				  ;
				  
Statement ::= (SingleStatementDsg) DesignatorStatementList SEMI
					|
					(StatementIf) IF LPAREN Condition RPAREN Statement StatementElse
					|
					(StatementBreak) BREAK SEMI
					|
					(StatementContinue) CONTINUE SEMI
					|
			  		(StatementReturn) RETURN SEMI
			  		|
			  		(StatementReturnExpr) RETURN ExprList SEMI
			  		|
			  		(StatementRead) READ LPAREN Designator RPAREN SEMI
			  		|
			  		(StatementPrint1) PRINT LPAREN ExprList RPAREN SEMI
			  		|
			  		(StatementPrint2) PRINT LPAREN ExprList COMMA NUM RPAREN SEMI
			  		|
			  		(StatementDo) DoVisit Statement WHILE LPAREN ConditionDesignator RPAREN SEMI
					|
					(StatementRepeat) LBRACE StatementList RBRACE 
			  		;

DoVisit ::= (DoVisit) DO;

StatementElse ::= (ElseStmtYes) ELSE Statement
				  |
				  (ElseStmtNo) /* epsilon */
				  ;

ConditionDesignator ::= (CondDesignator) Condition
                        |
                        (CondDesignatorList) Condition COMMA DesignatorStatementList
                        |
                        (NoCondDesignator) /* epsilon */
                        ;



DesignatorStatementList ::= (ListDesignatorStatement) DesignatorStatement
							|
							(DesignatorAssignopSetop) Designator Assignop Designator Setop Designator
							;

DesignatorStatement ::= (DesignatorAssignExpr) Designator Assignop ExprList
                    	|
                    	(ErrorDesignatorStatement) error:e
                    	{: parser.report_error("Oporavak od greske u konstrukciji dodele. Linija: " + eleft, null); :}
                    	|
                    	(DesignatorActPars) Designator LPAREN ActParsList RPAREN
                     	|
                    	(DesignatorINC) Designator INC
                   		|
                    	(DesignatorDEC) Designator DEC
                    	;



ActParsList ::= (ListActPars) ActParsListBegin ActPar ActPars
                |
                (NoActParsList) ActParsListBegin
                ;

ActParsListBegin ::= (ActParsListBegin) /* epsilon */;

ActPars ::= (ActParsRepeat) COMMA ActPar ActPars
            |
            (NoActPars) /* epsilon */
            ;


ActPar ::= (ActPar) ExprList;



Condition ::= (ConditionC) CondTermList
	          |
              (ErrorCondition) error:c
              {: parser.report_error("Oporavak od greske u logickom izrazu IF-a. Linija: " + cleft, null); :}	
              ;


CondTermList ::= (JustCondTermList) CondTerm
                 |
				 (CondTermListOr) CondTermList OR CondTerm     
				 ;

CondTerm ::= (CondTerm) CondFactList;

CondFactList ::= (JustCondFactList) CondFact
				 |			 
				 (CondFactListAnd) CondFactList AND CondFact 
				 ;
				
CondFact ::=  (CondFactExpr) ExprList
			  | 
			  (CondFactExprRelop) ExprList Relop ExprList
			  ;	



ExprList ::= (ListExpr) ExprAddopTerm 
			 |
			 (ExprMap) Designator MAP Designator
			 ;


ExprAddopTerm ::= (AddopExprTerm) ExprAddopTerm Addop Term 
                  |
                  (TermAddopExprTerm) Term
                  ;
                  

Term ::= (Term) TermMulFactor;

TermMulFactor ::= (MulopTerm) TermMulFactor Mulop FactorList 
                  |
                  (FactorMulopTerm) FactorList
                  ;
                  
FactorList ::= (FactorListMinus) MINUS Factor
               |
               (NoFactorListMinus) Factor
               ;
	
                  
Factor ::= (FactorDesignator) Designator FactorActPars
           |
		   (FactorNum) NUM
           |
           (FactorChar) CHAR
           |
           (FactorBool) BOOL
           |
           (FactorNew) NEW Type LBRACKET ExprList RBRACKET
           |
           (FactorExpr) LPAREN ExprList RPAREN
           ;

FactorActPars ::= (ActParsFactor) LPAREN ActParsList RPAREN
                  |
                  (NoActParsFactor) /* epsilon */
                  ;
              
			
				

Designator ::= (DesignatorIdent) IDENT
               |
               (DesignatorExpr) DesignatorArray LBRACKET ExprList RBRACKET
               ;
				  
DesignatorArray ::= (DesignatorArray) IDENT;		  


Assignop ::= (Assignop) ASSIGN;

Addop ::= (AddopPlus) PLUS
		  |
		  (AddopMinus) MINUS
		  ;

Mulop ::= (MulopMul) MUL
		  |		  
		  (MulopDiv) DIV
		  |
		  (MulopMod) MOD
		  ;
		  	  
Relop ::= (RelopEq) EQ
		  |
		  (RelopNe) NEQ
		  |
		  (RelopGt) GT
		  |
		  (RelopGe) GTE
		  |
		  (RelopLt) LT
		  |
		  (RelopLe) LTE
		  ;
		  
Setop ::= (Setop) UNION;